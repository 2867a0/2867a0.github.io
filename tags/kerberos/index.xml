<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kerberos on 2867a0</title>
    <link>http://localhost:1313/tags/kerberos/</link>
    <description>Recent content in Kerberos on 2867a0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 05 Mar 2022 22:53:46 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/kerberos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kerberos: 利用</title>
      <link>http://localhost:1313/posts/2022/kerberos-attack/</link>
      <pubDate>Sat, 05 Mar 2022 22:53:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/2022/kerberos-attack/</guid>
      <description>TGT阶段 黄金票据 利用的是第二次：身份认证请求包，身份认证返回包中的ticket使用krbtgt的 NTLM hash加密，如果能获得krbtgt hash，就能自己制作TGT票据。即黄金票据&#xA;kerberos::golden /domain:[domain] /sid:[domain sid] /id:500 /user:AnyFuckUser /krbtgt:[krbtgt NTLM Hash] 用户名枚举 在请求TGT票据协商请求包中，因为服务器没有去验证请求用户的密码，所以可以修改CNameString去猜解域用户名&#xA;nmap的krb5-enum-users脚本使用该方式来枚举用户名。&#xA;python 脚本&#xA;密码爆破/密码喷洒 当请求TGT时用户对应的密码不正确，服务器会返回KDC_ERR_PREAUTH_FAILED错误。可以用这个值去暴力破解用户对应的密码。&#xA;（错误密码的数据返回包）&#xA;（正确密码返回的数据包）&#xA;python脚本实现，爆破和喷洒用的都是同一个函数，判断一下返回值就可以了&#xA;AS-Repoasting 域内用户可以配置 &amp;ldquo;不要求预身份认证&amp;rdquo;。&#xA;当这些用户向服务器发起协商请求包时，对于通过协商请求的响应包，可以获得响应包中的cipher字段（这部分是使用用户hash加密session-key），将其拼接成 Kerberos 5 AS-REP etype 23 使用hashcat破解出该用户的明文口令。&#xA;拼接方式为：$krb5asrep$23$[user]@[domain]:[cipher前32位]$[cipher后续值]&#xA;用hashcat破解&#xA;hashcat -m 18200 hash.txt /usr/share/wordlist/rockyou.txt impacket里面对于设置该值的用户使用getTGT脚本是获取不到TGT票据的，会报SessionKeyDecryptionError错误。响应数据包中会直接返回TGT票据&#xA;用GetNPUsers脚本就可以解析了&#xA;impacket-GetNPUsers yunwei.lab/user:123.com -dc-ip 20.0.0.100 python脚本实现，输入用户名/用户名字典，输出hashcat可直接跑的命令&#xA;Path The Hash / Path The Key 在使用账号密码登录时会把密码加密成hash，所以直接使用hash去认证也可以。如果hash为NTLM + RC4加密，则为Pass The Hash。Hash为AES Key则为Pass The Key&#xA;TGS阶段 Kerberoasting 在请求TGS票据的时候，只要请求的TGT票据是正确的，服务器就会返回请求服务对应的TGS票据，并不会去检查访问权限。&#xA;返回的TGS票据中ticket.enc_part是用要请求的服务NTLM Hash加密的，爆破这个值就能获得请求服务的NTLM Hash</description>
    </item>
    <item>
      <title>Kerberos: AP-REQ</title>
      <link>http://localhost:1313/posts/2022/kerberos-ap-req/</link>
      <pubDate>Sun, 20 Feb 2022 22:53:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/2022/kerberos-ap-req/</guid>
      <description>请求TGS票据我准备用kekeo。在普通域机器上执行下面的命令发起TGS请求。&#xA;# 先请求一张jm的TGT票据 kekeo.exe &amp;#34;tgt::ask /domain:yunwei.lab /user:jm /password:123.com&amp;#34; # 再请求TGS票据 kekeo.exe &amp;#34;tgs::ask /tgt:TGT_.kirbi /service:cifs/srv2012.yunwei.lab&amp;#34; &amp;#34;exit&amp;#34; 请求 常规的请求TGS票据里面会携带padata和req-body数据块。&#xA;padata中的ap-req.ticket是请求的TGT票据。KDC会校验TGT票据，如果票据正确，就返回TGS票据。&#xA;req-body块中，cname.CNameString表示发起请求的用户是jm；sname.SNameString表示要访问的spn为cift/srv2012.yunwei.lab，&#xA;响应 KDC 使用krbtgt hash解密TGT，不管用户有没有访问对应服务的权限，就会返回用请求的服务hash加密的TGS票据（ticket），票据对应的服务为cifs/srv2012.yunwei.lab。如下图，ticket.enc-part.cipher使用该服务的NTLM hash加密。&#xA;同时，返回的数据包表明这张票据是jm这个用户请求的（cname.CNameString）。&#xA;和ticket同级还有一个enc-part，这个是用第一阶段里面返回的session_key加密的。这个enc-part会作为下一阶段的认证密钥</description>
    </item>
    <item>
      <title>Kerberos: AS-REQ</title>
      <link>http://localhost:1313/posts/2022/kerberos-as-req/</link>
      <pubDate>Thu, 10 Feb 2022 22:53:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/2022/kerberos-as-req/</guid>
      <description> 分析kerberos请求第一阶段，以下是基于impacket请求发出的数据包进行分析。其他工具可能有所差异，但问题不大。&#xA;impacket-getTGT yunwei.lab/jm:123.com -dc-ip 20.0.0.100 在impacket中，一共会发送两次AS Req包。&#xA;第一次：协商 第一次为协商请求包，这个数据包的功能有两个：&#xA;服务器和客户端协商加密协议（etype.ENCTYPE），如果不支持则继续协商。 其次判断用户名是否存在（cname.cname-string.CNameString）。 上述条件都满足后，会进入下一阶段：身份验证&#xA;协商包里面只有用户名。服务器会去判断请求的用户名是否存在，如果不存在则不再进行后续操作。&#xA;其他字段的信息：realm指的是域控的域名。nonce是随机生成的数&#xA;第二次：身份认证 这个请求中不会直接发送密码hash给服务器，而是发送一个用密码加密的时间戳（padata-type: pA-ENC-TIMESTAMP）给服务器。服务器收到请求后会使用用户名对应的密码解密时间戳。&#xA;如果时间戳在一定范围内，则认证成功，服务器返回TGT票据（ticket）和Session Key（etc-part.cipher）。&#xA;TGT票据使用krbtgt账户的密码hash进行加密，TGT票据中包含PAC。PAC又包含 Client SID + Client Group。 Session Key使用（CNameString）用户名对应的密码进行加密，作为下阶段认证密钥。但是，服务器不会存储Session Key。 </description>
    </item>
    <item>
      <title>Kerberos: 认证过程</title>
      <link>http://localhost:1313/posts/2022/kerberos-base/</link>
      <pubDate>Tue, 01 Feb 2022 22:53:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/2022/kerberos-base/</guid>
      <description>基本认证过程 请求TGT票据 客户端请求：发送客户端hash加密的时间戳&#xA;服务器响应：解密，如果时间戳在一定范围内，认证通过，返回TGT票据和session key。TGT票据使用krbtgt hash加密，TGT票据中包含PAC。PAC又包含 Client SID + Client Group。session key会作为下阶段认证密钥&#xA;请求TGS票据 客户端请求：拿着TGT票据向KDC发起针对特定服务的TGS请求&#xA;服务器响应：使用krbtgt hash解密TGT，返回用服务器hash加密的TGS票据和（用上一阶段的session key加密的）新的session key。（这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据）&#xA;AP请求/响应 客户端请求：拿着TGS票据请求特定服务&#xA;服务器响应：使用自身hash解密出TGS票据中的PAC，向KDC询问客户端是否有访问权限。KDC解密PAC，获取Client SID和group，再根据该服务的ACL，判断Client是否有访问权限&#xA;参考 Windows Protocol Kerberos篇&#xA;黄金票据和白银票据攻击及其原理介绍 - 简书</description>
    </item>
  </channel>
</rss>
