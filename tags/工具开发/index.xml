<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具开发 on 2867a0</title>
    <link>https://gokarna-hugo.netlify.app/tags/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 工具开发 on 2867a0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Jul 2023 07:16:00 +0800</lastBuildDate><atom:link href="https://gokarna-hugo.netlify.app/tags/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GoLdapTool工具开发篇-1: SDDL解析</title>
      <link>https://gokarna-hugo.netlify.app/posts/2023/sddl_1/</link>
      <pubDate>Sun, 16 Jul 2023 07:16:00 +0800</pubDate>
      
      <guid>https://gokarna-hugo.netlify.app/posts/2023/sddl_1/</guid>
      <description>python编写的ldap查询工具不能编译，不方便在windows主机上使用，于是想着用golang去重构。golang有ldap v3库，可以满足基本的查询需求。但是，该库没有实现SDDL的解析。在其issues中有提到相关的解析文章，可以自己实现。
解析 要解析SDDL数据，需要先获取一段原始数据，做如下查询并将nTSecurityDescriptor​的原始数据打印出来，如下图。
​
整个SDDL结构分为NtSecurityDescriptor头​+Sacl头​+Sacl Ace条目​+Dacl头​+Dacl Ace条目​
后续的解析都以我在编写该文章之前的数据进行解析
​
NtSecurityDescriptor header 根据微软官方​[MS-DTYP]: 2.4.6的描述，该部分是一个SECURITY_DESCRIPTOR​结构，有如下字段。其中，Revision​、Sbz1​、Control​、OffsetOwner​、OffsetGroup​、OffsetSacl​、OffsetDacl​这几个字段总共占20个字节。
OffsetOwner​和OffsetGroup​是所有者、所在组的数据偏移，OffsetSacl​和OffsetDacl​是Sacl header、Dacl header数据的偏移地址。根据这些偏移找到对应的数据并将数据解析赋值给变量OwnerSid​、GroupSid​、Sacl​、Dacl​
​​
上述结构对应我们Dump出来的数据如下图。我们主要关心的是其偏移大小**。**​OffsetOwner​占4个字节，为C0 08 00 00​，按照小端解析为00 00 08 C0​，转换为10进制值为2240​。OffsetGroup​同理。
OffsetSacl​的数据为14 00 00 00​，转换为10进制后是20​，也就是说，NtSecurityDescriptor header​之后紧跟着Sacl header​（偏移的起始地址为NtSecurityDescriptor header​的第一个字节）。
OffsetDacl​的数据为8C 00 00 00​，按照小端排序为00 00 00 8C​，转换为10进制之后是0x8C=140​
​​
NtSecurityDescriptor header​的数据就解析完了，紧跟着的是Sacl header​
Sacl 解析 Sacl​这一部分的数据包含Sacl header​ 和多个 Sacl Ace​条目。
根据微软MS-DTYP: 2.4.5中的描述，Acl​结构总共8个字节，我们需要关心的是AclSize​和AceCount​这两个字段，顾名思义，一个是Sacl​数据的大小，一个是Sacl Ace​的条目数量。
​​
我们找到原始数据中对应的字节数，如下图，就是Sacl header​
​​
这是解析之后的**。**​Acl Size​字段数据为78 00​，转换后的10进制值为120​。这个大小是Sacl header​的大小 + 所有Sacl Ace​的大小
Ace Count​的值为2，也就是说Sacl有两条Ace
​​
Sacl header​之后紧跟着的是其对应的Ace数据。
先来看Ace数据结构，在微软的文档只将AceType​、AceFlags​、AceSize​作为Ace Header​的字段，而我这里是将AceMask​、Extended​、SID​都放在了AceStruct​中进行解析。</description>
    </item>
    
  </channel>
</rss>
